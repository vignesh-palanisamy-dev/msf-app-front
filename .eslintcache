[{"G:\\vignesh\\msf-app-front\\src\\index.js":"1","G:\\vignesh\\msf-app-front\\src\\App.js":"2","G:\\vignesh\\msf-app-front\\src\\reportWebVitals.js":"3","G:\\vignesh\\msf-app-front\\src\\appHistory.js":"4","G:\\vignesh\\msf-app-front\\src\\views\\registerScreen.js":"5","G:\\vignesh\\msf-app-front\\src\\views\\loginScreen.js":"6","G:\\vignesh\\msf-app-front\\src\\views\\otpScreen.js":"7","G:\\vignesh\\msf-app-front\\src\\service\\authenticationService.js":"8","G:\\vignesh\\msf-app-front\\src\\utils\\serverUtil.js":"9","G:\\vignesh\\msf-app-front\\src\\utils\\loggerUtil.js":"10","G:\\vignesh\\msf-app-front\\src\\views\\homeScreen.js":"11","G:\\vignesh\\msf-app-front\\src\\service\\profileService.js":"12","G:\\vignesh\\msf-app-front\\src\\utils\\encryptUtil.js":"13"},{"size":500,"mtime":499162500000,"results":"14","hashOfConfig":"15"},{"size":977,"mtime":1607232226357,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":89,"mtime":1607211977650,"results":"18","hashOfConfig":"15"},{"size":9704,"mtime":1607289246786,"results":"19","hashOfConfig":"15"},{"size":4214,"mtime":1607247381460,"results":"20","hashOfConfig":"15"},{"size":8142,"mtime":1607289528212,"results":"21","hashOfConfig":"15"},{"size":2283,"mtime":1607249842144,"results":"22","hashOfConfig":"15"},{"size":157,"mtime":1607250640546,"results":"23","hashOfConfig":"15"},{"size":671,"mtime":1607247571129,"results":"24","hashOfConfig":"15"},{"size":12046,"mtime":1607247941385,"results":"25","hashOfConfig":"15"},{"size":896,"mtime":1607240364541,"results":"26","hashOfConfig":"15"},{"size":669,"mtime":1607248085204,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"xnq0uc",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"G:\\vignesh\\msf-app-front\\src\\index.js",[],["57","58"],"G:\\vignesh\\msf-app-front\\src\\App.js",[],"G:\\vignesh\\msf-app-front\\src\\reportWebVitals.js",[],"G:\\vignesh\\msf-app-front\\src\\appHistory.js",[],"G:\\vignesh\\msf-app-front\\src\\views\\registerScreen.js",["59"],"G:\\vignesh\\msf-app-front\\src\\views\\loginScreen.js",["60"],"import React,{useState, useEffect} from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {  toast } from 'react-toastify';\r\nimport { login } from '../service/authenticationService';\r\nimport * as encryptUtil from '../utils/encryptUtil';\r\nimport { viewProfile } from '../service/profileService';\r\n\r\nexport default function LogIn(props) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  \r\n  const [userName,setUserName] = useState('');\r\n  const [password,setPassword] = useState('');\r\n  const [showValidateError,setShowValidateError] = useState(false);\r\n\r\n\r\n  useEffect(() =>{\r\n    viewProfile().then((response) =>{\r\n        if(response?.userData){\r\n          history.push(\"/home\");\r\n        }\r\n      });\r\n   },[]);\r\n\r\n  const onLoginClick = (event) => {\r\n    let isValidateError;\r\n    if(userName === \"\" || password === \"\" ){\r\n        isValidateError=true;\r\n        setShowValidateError(true);\r\n        toast.error(\"Missing Required Field.\");\r\n    }else{\r\n      setShowValidateError(false);\r\n    }\r\n    if(isValidateError){\r\n      return;\r\n    }\r\n    let pwd= encryptUtil.getEncrypt(password.toString());\r\n    login(userName,parseInt(userName), pwd).then(()=>{\r\n      history.push(\"/home\");\r\n    });\r\n    event.preventDefault();\r\n  };\r\n\r\n\r\n  return (\r\n    <Container maxWidth=\"xs\" style={{background:\"#ffff\", borderRadius:\"5px\"}} >\r\n      <div className={classes.container}>\r\n        <Avatar style={{ \r\n          background: 'linear-gradient(48deg, rgb(38 194 199 / 58%) 30%, rgb(0 43 255 / 99%) 90%)',\r\n          marginTop:\"16px\"}}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <h4 style={{lineHeight:\"0px\",paddingBottom:\"8px\"}} color=\"textSecondary\">\r\n          Log In\r\n        </h4>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                id=\"user_name\"\r\n                name=\"user_name\"\r\n                label=\"User Name / Phone No\"\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                value={userName}\r\n                error={showValidateError && userName === \"\"}\r\n                onChange={(event)=>setUserName(event.target.value.trim())}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                id=\"password\"\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                value={password}\r\n                error={showValidateError &&  password === \"\"}\r\n                onChange={(event)=>setPassword(event.target.value.trim())}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{marginTop:\"16px\"}}\r\n            onClick={onLoginClick}\r\n          >\r\n            Sign In\r\n          </Button>\r\n          <Grid container justify=\"center\" style={{padding:'16px'}}>\r\n            <Grid item>\r\n              <Link href=\"register\" variant=\"body2\">\r\n                Don't have an account? Register\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container justify=\"center\" style={{paddingBottom:'16px'}}>\r\n            <Grid item>\r\n              <Link href=\"otp\" variant=\"body2\">\r\n                Forget Password? \r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n      </div>\r\n      </Container>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  container: {\r\n    marginTop: \"16px\",\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n}));","G:\\vignesh\\msf-app-front\\src\\views\\otpScreen.js",["61","62"],"G:\\vignesh\\msf-app-front\\src\\service\\authenticationService.js",[],"G:\\vignesh\\msf-app-front\\src\\utils\\serverUtil.js",[],"G:\\vignesh\\msf-app-front\\src\\utils\\loggerUtil.js",[],"G:\\vignesh\\msf-app-front\\src\\views\\homeScreen.js",["63"],"import React,{useState, useEffect} from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SupervisedUserCircleOutlined from '@material-ui/icons/SupervisedUserCircleOutlined';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {  toast } from 'react-toastify';\r\nimport { viewProfile , updateProfile } from '../service/profileService';\r\nimport { logout } from '../service/authenticationService';\r\nimport * as encryptUtil from '../utils/encryptUtil';\r\n\r\nexport default function Home(props) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  \r\n  const [firstName,setFirstName] = useState('');\r\n  const [lastName,setLastName] = useState('');\r\n  const [userName,setUserName] = useState('');\r\n  const [password,setPassword] = useState('');\r\n  const [reTypePassword,setReTypePassword] = useState('');\r\n  const [emailId,setEmailId] = useState('');\r\n  const [phoneNo,setPhoneNo] = useState(0);\r\n  const [dateOfBirth,setDateOfBirth] = useState('2017-05-24');\r\n  const [company,setCompany] = useState('');\r\n  const [experience,setExperience] = useState(0);\r\n  const [showValidateError,setShowValidateError] = useState(false);\r\n  const [passwordError,setPasswordError] = useState(false);\r\n  const [emailError,setEmailError] = useState(false);\r\n  const [userExistError,setUserExistError] = useState(\"\");\r\n  const [isDisable,setIsDisable] = useState(true);\r\n  const [showLoader,setShowLoader] = useState(true);\r\n\r\n  useEffect(() =>{\r\n    viewProfile().then((response) =>{\r\n        if(response?.userData){\r\n            let userData = response.userData;\r\n            let password = encryptUtil.deEncrypt(userData.password);\r\n            setFirstName(userData.first_name);\r\n            setLastName(userData.last_name);\r\n            setUserName(userData.user_name);\r\n            setPassword(password);\r\n            setReTypePassword(password);\r\n            setEmailId(userData.email_id);\r\n            setPhoneNo(userData.phone_no);\r\n            setDateOfBirth(userData.d_o_b);\r\n            setCompany(userData.company_name);\r\n            setExperience(userData.experience);\r\n          }else{\r\n            history.push(\"/login\");\r\n          }\r\n          setShowLoader(false);\r\n    }).catch(() =>{\r\n        setShowLoader(false);\r\n       history.push(\"/login\");\r\n    });\r\n  },[]);\r\n\r\nconst onEditClick = () =>{\r\n    setIsDisable(false);\r\n}\r\n\r\nconst onLogOutClick =() =>{\r\n    logout().then(() =>{\r\n        history.push(\"/login\");\r\n    });\r\n}\r\n\r\nconst onCancelClick = () =>{\r\n    setIsDisable(true);\r\n}\r\n  const onSaveClick = (event) => {\r\n    let isValidateError;\r\n    if((userName === \"\" || password === \"\" ||  reTypePassword === \"\" || \r\n       emailId === \"\" ||  phoneNo === \"\") && (!isValidateError)){\r\n        isValidateError=true;\r\n        setShowValidateError(true);\r\n        toast.error(\"Missing Required Field.\");\r\n    }else{\r\n      setShowValidateError(false);\r\n    }\r\n    if(password !== reTypePassword && (!isValidateError)){\r\n      isValidateError=true;\r\n      setPasswordError(true);\r\n      toast.error(\"Password Mismatch.\");\r\n    }else{\r\n      setPasswordError(false);\r\n    }\r\n    if(!emailId.toLocaleLowerCase().includes(\"@gmail.com\")&& (!isValidateError)){\r\n      isValidateError=true;\r\n      setEmailError(true);\r\n      toast.error(\"Invalid Mail Address.\");\r\n    }else{\r\n      setEmailError(false);\r\n    }\r\n if(isValidateError){\r\n   return;\r\n }\r\n let pwd= encryptUtil.getEncrypt(password.toString());\r\n let updateMap = {user_name : userName, \r\n           password :pwd , phone_no : phoneNo,\r\n           email_id : emailId, \r\n           first_name : firstName,\r\n           last_name : lastName,\r\n           d_o_b : dateOfBirth,\r\n           company_name: company,\r\n           experience : experience};\r\n\r\n updateProfile(updateMap).then(() =>{\r\n    setIsDisable(true);\r\n }).catch(error =>{\r\n  if(error.response?.data?.result?.userData){\r\n    let userData = error.response.data.result.userData;\r\n    setUserExistError(\"\");\r\n    if(userData.user_name === userName){\r\n      setUserExistError(\"userName\");\r\n    }else if(userData.phone_no === phoneNo){\r\n      setUserExistError(\"phoneNo\");\r\n    }\r\n  }\r\n })\r\n    event.preventDefault();\r\n  };\r\n\r\n\r\n  return (\r\n      <Container maxWidth=\"xs\" style={{background:\"#ffff\", borderRadius:\"5px\"}} >\r\n      {showLoader ? <CircularProgress style={{marginTop: \"16px\",\r\n                 position: \"absolute\"}} /> : null}\r\n      <div className={classes.container}>\r\n        <Avatar style={{ \r\n          background: 'linear-gradient(48deg, rgb(38 194 199 / 58%) 30%, rgb(0 43 255 / 99%) 90%)',\r\n          marginTop:\"16px\"}}>\r\n          <SupervisedUserCircleOutlined />\r\n        </Avatar>\r\n        <Button\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          color=\"default\"\r\n          style={{right:\"0px\",top:\"16px\", position:\"absolute\"}}\r\n          onClick={onLogOutClick}\r\n        >\r\n          Logout\r\n        </Button>\r\n        <h4 style={{lineHeight:\"0px\",paddingBottom:\"8px\"}} color=\"textSecondary\">\r\n          Hi {userName}\r\n        </h4>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                id=\"first_name\"\r\n                name=\"first_name\"\r\n                label=\"First Name\"\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                fullWidth\r\n                autoFocus\r\n                disabled={isDisable}\r\n                value={firstName}\r\n                onChange={(event)=>setFirstName(event.target.value.trim())}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                id=\"last_name\"\r\n                name=\"last_name\"\r\n                label=\"Last Name\"\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                disabled={isDisable}\r\n                value={lastName}\r\n                onChange={(event)=>setLastName(event.target.value.trim())}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                id=\"user_name\"\r\n                name=\"user_name\"\r\n                label=\"User Name\"\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                disabled\r\n                value={userName}\r\n                error={(showValidateError && userName === \"\")||(userExistError === \"userName\")}\r\n                onChange={(event)=>setUserName(event.target.value.trim())}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                id=\"password\"\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                disabled={isDisable}\r\n                required\r\n                fullWidth\r\n                value={password}\r\n                error={showValidateError &&  password === \"\"}\r\n                onChange={(event)=>setPassword(event.target.value.trim())}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                id=\"confirm_password\"\r\n                name=\"confirm_password\"\r\n                label=\"Retype Password\"\r\n                type=\"password\"\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                disabled={isDisable}\r\n                required\r\n                fullWidth\r\n                value={reTypePassword}\r\n                helperText={passwordError ?\"Password mismatch\":\"\"}\r\n                error={(showValidateError && reTypePassword === \"\") || passwordError}\r\n                onChange={(event)=>setReTypePassword(event.target.value.trim())}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                id=\"email_id\"\r\n                name=\"email_id\"\r\n                label=\"Email Address\"\r\n                type=\"email\"\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                disabled={isDisable}\r\n                required\r\n                fullWidth\r\n                value={emailId}\r\n                helperText={\"Supports only @gmail.com\"}\r\n                error={(showValidateError && emailId === \"\") || emailError}\r\n                onChange={(event)=>setEmailId(event.target.value.trim())}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                id=\"phone_no\"\r\n                name=\"phone_no\"\r\n                label=\"Phone No\"\r\n                variant=\"outlined\"\r\n                type=\"number\"\r\n                size=\"small\"\r\n                disabled\r\n                required\r\n                fullWidth\r\n                value={phoneNo}\r\n                error={(showValidateError && phoneNo === \"\")||(userExistError === \"phoneNo\")}\r\n                onChange={(event)=>setPhoneNo(event.target.value.trim())}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n               <TextField\r\n                 id=\"d_o_b\"\r\n                 name=\"d_o_b\"\r\n                 label=\"Birthday\"\r\n                 type=\"date\"\r\n                 disabled={isDisable}\r\n                 fullWidth\r\n                 size=\"small\"\r\n                 variant=\"outlined\"\r\n                 value={dateOfBirth}\r\n                 onChange={(event)=>setDateOfBirth(event.target.value.trim())}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                id=\"company\"\r\n                name=\"company\"\r\n                label=\"Company\"\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                fullWidth\r\n                disabled={isDisable}\r\n                value={company}\r\n                onChange={(event)=>setCompany(event.target.value.trim())}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                id=\"experience\"\r\n                name=\"experience\"\r\n                label=\"Experience(Y)\"\r\n                type =\"number\"\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                disabled={isDisable}\r\n                fullWidth\r\n                value={experience}\r\n                onChange={(event)=>setExperience(event.target.value.trim())}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          {isDisable ? <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{margin:\"16px 0px 16px 0px\"}}\r\n            onClick={onEditClick}\r\n          >\r\n            Edit Profile\r\n          </Button>\r\n           : null}\r\n          {!isDisable ?<Grid container spacing={2}>\r\n          <Grid item xs={12} sm={6}>\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            color=\"default\"\r\n            onClick={onCancelClick}\r\n            style={{margin:\"16px 0px 16px 0px\"}}\r\n            fullWidth\r\n          >\r\n            Cancel\r\n          </Button>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={onSaveClick}\r\n            style={{margin:\"16px 0px 16px 0px\"}}\r\n            fullWidth\r\n          >\r\n            Save\r\n          </Button>\r\n          </Grid>\r\n          </Grid>\r\n          : null}\r\n      </div>\r\n      </Container>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  container: {\r\n    marginTop: \"16px\",\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    position:\"relative\",\r\n  },\r\n}));","G:\\vignesh\\msf-app-front\\src\\service\\profileService.js",[],"G:\\vignesh\\msf-app-front\\src\\utils\\encryptUtil.js",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":41,"column":6,"nodeType":"70","endLine":41,"endColumn":8,"suggestions":"71"},{"ruleId":"68","severity":1,"message":"69","line":31,"column":6,"nodeType":"70","endLine":31,"endColumn":8,"suggestions":"72"},{"ruleId":"73","severity":1,"message":"74","line":27,"column":16,"nodeType":"75","messageId":"76","endLine":27,"endColumn":24},{"ruleId":"68","severity":1,"message":"69","line":40,"column":6,"nodeType":"70","endLine":40,"endColumn":8,"suggestions":"77"},{"ruleId":"68","severity":1,"message":"69","line":60,"column":5,"nodeType":"70","endLine":60,"endColumn":7,"suggestions":"78"},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["81"],["82"],"no-unused-vars","'setEmail' is assigned a value but never used.","Identifier","unusedVar",["83"],["84"],"no-global-assign","no-unsafe-negation",{"desc":"85","fix":"86"},{"desc":"85","fix":"87"},{"desc":"85","fix":"88"},{"desc":"85","fix":"89"},"Update the dependencies array to be: [history]",{"range":"90","text":"91"},{"range":"92","text":"91"},{"range":"93","text":"91"},{"range":"94","text":"91"},[1745,1747],"[history]",[1157,1159],[1692,1694],[2617,2619]]